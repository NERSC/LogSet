# An ontology for mapping between pattterns in string literals. The motivating
# context is describing LogSeries for the logset ontology. Often a "type" of logfile
# is identified by a filename like "console-20180501". The Pattern class has a tag, 
# eg "<date:YYMMDD>" that can be used in a string literal ("console-<date:YYMMDD>"),
# a regex for parsing the pattern (eg to get the year, month and day it represents),
# and a format for assembling the components back into a literal string (eg
# "<year><month><day>")

# basic vocabularies used here:
# rdf and rdfs between them define essential types and relationships:
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
# owl adds a more constrained formal description logic for classes:
@prefix owl: <http://www.w3.org/2002/07/owl#> .
# dublin core terms, these form base of dcat vocab:
@prefix dct: <http://purl.org/dc/terms/> .

# declare myself and set a prefix:
@base <http://portal.nersc.gov/project/mpccc/sleak/resilience/datasets/> .
@prefix : <pattern#> .

:
    a owl:Ontology ;
    dct:title "a Pattern vocabulary" ;
    rdfs:label "pattern" ;
    owl:versionIRI <v0.1> ;
    .


:Pattern
    a owl:Class ;
    rdfs:comment """ Frequently specific subjects in a log or filenames relevant to a
                     LogSeries are identified via regex (eg a reference to
                     edison:nid00123 looks like 'nid00123', and a file called
                     'messages-20170129' is probably a messages logfile for Jan 29,
                     2017. Getting a correct regex for each thing is tedious and
                     unreliable, so we build a database of regexes with human-readable
                     tags.
                 """ ;
    rdfs:subClassOf [
        rdf:type owl:Restriction ;
        owl:onProperty :tag ;
        owl:cardinality 1 ;
    ] ;
    rdfs:subClassOf [
        rdf:type owl:Restriction ;
        owl:onProperty :regex ;
        owl:cardinality 1 ;
    ] ;
    rdfs:subClassOf [
        rdf:type owl:Restriction ;
        owl:onProperty :format ;
        owl:cardinality 1 ;
    ] ;
    .

:tag
    a owl:DatatypeProperty ;
    rdfs:domain :Pattern ;
    rdfs:range rdfs:Literal ;
    rdfs:comment """ a marker indicating the substring that follows a pattern in a 
                       string literal, eg <date:YYYYMM>
                 """ ;
    .

:regex
    a owl:DatatypeProperty ;
    rdfs:domain :Pattern ;
    rdfs:range rdfs:Literal ;
    rdfs:comment """ A regex, in Python syntax, to parse the pattern substring, eg
                       (?P<date>(?P<year>20[0-9]{2})(?P<month>0[1-9]|1[0-2])
                 """ ;
    .

:format
    a owl:DatatypeProperty ;
    rdfs:domain :Pattern ;
    rdfs:range rdfs:Literal ;
    rdfs:comment """ How the match coponents can be assembed to re-form them string, eg
                       <year><month><day> might become 20190321 
                 """ ;
    .


