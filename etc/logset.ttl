# An ontology for metadata describing log-like information about HPC systems,
# intended to support analysis of faults and failures.

# a client should be able to query a graph of logset objects to find, eg
# logfiles and job records etc about a specific job. or affected by a
# specific component failure

# basic vocabularies used here:
# rdf and rdfs between them define essential types and relationships:
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
# owl adds a more constrained formal description logic for classes:
@prefix owl: <http://www.w3.org/2002/07/owl#> .
# dublin core terms, these form base of dcat vocab:
@prefix dct: <http://purl.org/dc/terms/> .
# XMLSchema defines "primitive" types like dateTime
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# the dataset definition is derived from the Data Catalog Vocabulary, with
# some extensions and restrictions to better map to aspects of a HPC center
@prefix dcat: <http://www.w3.org/ns/dcat#> .

# skos provides the idea of a "Concept", which we use to describe the type
# of information found in a LogSeries (eg "job_records", "log_messages")
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .

# valid urls/bases/prefixes include:
#@prefix ddict: <https://raw.githubusercontent.com/NERSC/LogSet/master/etc/ddict#> .
#@prefix ddict: <file:///global/homes/s/sleak/Monitoring/Resilience/LogSet/etc/ddict#> .
#@prefix ddict: <../etc/ddict#> .
# .. however, using file:/// or relative paths can be risky, because eg the two 
# urls above might actually be the same file, but they are distinct RDF namespaces,
# so there is not a single definition for each term 

# declare myself and set a prefix:
#@base <https://portal.nersc.gov/project/m888/resilience/datasets/> .
@base <http://portal.nersc.gov/project/mpccc/sleak/resilience/datasets/> .
@prefix : <logset#> .
:
    a owl:Ontology ;
    dct:title "the LogSet vocabulary" ;
    rdfs:label "logset" ;
    owl:versionIRI <v0.4> ;
    .


# meta to help describe the volcabulary and support tools using it:
:recommendedProperty
    a owl:ObjectProperty ;
    rdfs:comment """ mechanism to inform developers and tools that an instance
                     of a logset class should have this property, though it is not
                     strictly required
                 """ ;
    rdfs:domain owl:Class ;
    rdfs:range rdf:Property ;
    .


# the classes in our vocabulary:
:Subject
    a owl:Class ;
    rdfs:subClassOf dct:PhysicalResource ;
    rdfs:comment """ A thing that a ConcreteLog is about, eg a system or subsystem
                     or a specific job or service (note that we slightly abuse
                     PhysicalResource to include some non-physical things here).
                 """ ;
    :recommendedProperty rdfs:label,
                         dct:description ;
    .

:isKnownAs
    a owl:DatatypeProperty ;
    rdfs:comment " a string-literal alias for a thing " ;
    rdfs:domain :Subject ;
    rdfs:range rdfs:Literal ;
    .

:affects
    a owl:ObjectProperty ;
    rdfs:comment """ Components in an HPC center are not a strict hierarchy, eg a
                     filesystem might be shared by multiple systems. So we connect
                     non-hierarchically related systems and subsystems with an
                     'affects' relationship
                 """ ;
    rdfs:domain :Subject ;
    rdfs:range :Subject ;
    .


:hasPart
    a owl:FunctionalProperty ;
    rdfs:comment """ For Subjects which really do form a strict hierarchy. hasPart/partOf
                     are not quite subclasses of :affects 
                 """ ;
    rdfs:domain :Subject ;
    rdfs:range :Subject ;
    .


# === not sure about: 

:identifyingPattern
    a owl:DatatypeProperty ;
    rdfs:comment """ a string which includes known Pattern tags eg
                       console-<date:YYYYMMDD>
                     that can be mapped to a regex via a :Pattern, which can then be
                     used to match eg filenames, or log lines, relevant to a Subject
                     or LogSeries
                 """ ;
    #rdfs:domain owl:unionOf (:Subject, :LogSeries) ;
    rdfs:domain :Subject ;
    rdfs:range rdfs:Literal ;
    .


# rdflib doesn't actually do owl reasoning, so a naive query won't infer partOf from
# hasPart or vice versa .. would need to carefully query both directions
:partOf
    a owl:InverseFunctionalProperty ;
    owl:inverseOf :hasPart ;
    .

:relevantLogSeries
    a owl:ObjectProperty ;
    rdfs:comment """ to help in locating/defining subjects for logs, having a list of known
                     LogSeries that are relevant to a subject might help guide the cataloger
                     to list subjects sensibly
                 """;
    rdfs:domain :Subject ;
    rdfs:range :LogSeries ;
    .

:Link
    a owl:Class ;
    rdfs:subClassOf :Subject ;
    rdfs:label "link" ;
    rdfs:comment """ A link is used to delimit failure domains: it is not (usually)
                     part of a specific component (though might be part of a wider
                     system) but it affects and is affected by the things on each end
                     (its endPoints)
                 """ ;
    .

:endPointOf
    a owl:ObjectProperty ;
    rdfs:comment """ endpoint of something, primarily a network link. Failure doesn't
                     necessarily pass an endpoint, eg a failed link might indirectly
                     impact the component that is an endPointOf it, but doesn't imply
                     that the endPoint also failed. Likewise, an endPoint failing
                     doesn't imply that the link failed.
                 """ ;
    rdfs:domain :Subject ;
    rdfs:range :Link ;
    .

:LogSet
    a owl:Class ;
    rdfs:subClassOf dcat:Catalog ;
    rdfs:comment """ A LogSet is a collection of related logs (eg, the logs
                     from a Cray boot session on NERSC Cori - related in system
                     and access and timespan)
                     It is recommended but not enforced that a LogSet instance
                     should have certain properties describing its provenance:
                     # dct:title         a rdfs:Literal
                     # dct:description   a rdfs:Literal
                     # dct:publisher     a foaf:Organization
                     # dcat:contactPoint a vcard:Kind
                     (publisher and contactPoint are especially useful when the
                     actual log data is not directly accessible to people or
                     tools using the metadata, so that having identified that
                     data exists, they can contact someone to request access).
                     The actual files (or db queries etc) of the logs are
                     described as a :ConcreteLog, based on dcat:Distribution.
                     A LogSet is expected to be defined in its own index file
                     and included in a dcat:Catalog
                 """ ;
    :recommendedProperty dct:title,
                         dct:description ;
    .

:LogSeries
    a owl:Class;
    rdfs:subClassOf dct:Standard ;
    rdfs:comment """ A 'type' of logfile, eg a console or outage log. Might be
                     specific to a type of system, or OS version, but common to
                     systems of that type (eg Cray with CNL6). Can be used by
                     tools to indicate how to handle a log. Must have a property
                     indicating the 'canonical' format that tools can assume on.
                     Note: we may need to add an 'equivalentTo' property for
                     LogSeries that can be in multiple places and formats, eg a
                     text log on a server and an index in an ElasticSearch db.
                     A LogSeries is expected to be defined in a data dictionary
                 """ ;
    :recommendedProperty :infoType,
                         :logFormatType ;
    .

:ConcreteLog
    a owl:Class ;
    rdfs:label "ConcreteLog" ;
    rdfs:subClassOf dcat:Distribution ;
    :recommendedProperty :isInstanceOf,
                         dct:temporal,
                         dcat:byteSize,
                         :subject;
    .

:LogFormatType
    a owl:Class ;
    rdfs:comment """ An entity representing how log data is organized, in order
                     to help tools decide how to handle a given log.
                     For example, most logs are timestamped-line-per-entry but
                     some are a timestamped multiline block, others have a file
                     per timestamp and contain a table, others hove no obvious
                     structure at all.
                     It is likely valuable for a LogFormatType to include a
                     dcat:mediaType property, eg 'text/plain'
                     A LogFormatType is expected to be defined in a data
                     dictionary and to correspond to a handler class for logs in
                     that format
                 """ ;
    :recommendedProperty :dataSource,
                         dcat:mediaType ;
    .

# FIXME should probably use dct:accrualPeriodicity for this (a dct:Frequency)
# annoyingly, there doesn't seem to be any good definition of that, I've seen an
# example using <http://purl.org/cld/freq/daily>, but that seems to be a broken
# link. But, eg <http://purl.org/never> might be a good way to indicate closed
:isClosed
    a owl:ObjectProperty, owl:FunctionalProperty ;
    rdfs:comment """ boolean value indicating that no new entries are arriving
                     in this logset (as compared to a "living" data source
                     with entries being added over time)
                 """ ;
    rdfs:domain :LogSet ;
    rdfs:range xsd:boolean ; # can be 'true' or 'false'. No value means 'false'
    .

:subject
    a owl:ObjectProperty ;
    rdfs:comment """ The entity whose state this LogSet or ConcreteLog describes.
                     (eg a console-log might be for nersc:edison)
                 """ ;
    rdfs:domain :ConcreteLog ;
    rdfs:range :Subject ;
    .

:isViewOf
    a owl:ObjectProperty ;
    rdfs:comment """ for metadata collections such as annotations on a logset,
                     the LogSet(s) this collection reflects
                 """ ;
    rdfs:domain :LogSet ;
    rdfs:range :LogSet ;
    .

# make dct:temporal amenable to sparql queries, following the pattern used by
# DDI Alliance and OpenGeoSpatial.org of defining startDate and endDate properties
# for a dct:PeriodOfTime, and in indexes and queries use a nested blank node for
# the dct:PeriodOfTime itself.
# Note that for sparql queries to work, the dates *must* be include a timezone
# and be marked as ^^xsd:dateTime, both in the index and in the query (or they
# get compared as literals). The time part (eg T12:00:00) is optional
# note: DCAT2 has formalized this, now it is part of that vocab
:startDate
    a owl:DatatypeProperty ;
    rdfs:domain dct:PeriodOfTime ;
    rdfs:range xsd:dateTime ;
    .

:endDate
    a owl:DatatypeProperty ;
    rdfs:domain dct:PeriodOfTime;
    rdfs:range xsd:dateTime ;
    .

:recordCount
    a owl:DatatypeProperty ;
    rdfs:domain :ConcreteLog ;
    rdfs:range xsd:integer ;
    .

:estRecordCount
    a owl:DatatypeProperty ;
    rdfs:domain :ConcreteLog ;
    rdfs:range xsd:integer ;
    rdfs:comment """ an estimate of the number of records in a ConcreteLog,
                     if that is guessable/appropriate
                 """ ;
    .

:estRecordsPerDay
    a owl:DatatypeProperty ;
    rdfs:domain :ConcreteLog ;
    rdfs:range xsd:integer ;
    rdfs:comment """ for open-ended ConcreteLogs, an estimate of the number of
                     records that get added per day
                 """ ;
    .

:logFormatType
    a owl:ObjectProperty, owl:FunctionalProperty ;
    rdfs:comment """ the LogFormatType for this LogSeries
                 """ ;
    rdfs:domain :LogSeries ;
    rdfs:range :LogFormatType ;
    .

## FIXME not sure about this
#:dataSource
#    a owl:ObjectProperty, owl:FunctionalProperty ;
#    rdfs:comment """ the DataSource for this LogFormatType
#                 """ ;
#    rdfs:domain :LogFormatType ;
#    rdfs:range dcat:DataService ;
#    .

:infoType
    a owl:ObjectProperty, owl:FunctionalProperty ;
    rdfs:comment """ what sort of thing does this LogSeries describe? 
                     eg ddict:job_records, or ddict:log_messages
                 """ ;
    rdfs:domain :LogSeries ;
    rdfs:range skos:Concept ;
    .











