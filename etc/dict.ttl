# A sample/starting data dictionary

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dcat: <http://www.w3.org/ns/dcat#> .

# declare myself and set a prefix:
#@base <https://raw.githubusercontent.com/NERSC/LogSet/master/etc> .
@base <http://portal.nersc.gov/project/mpccc/sleak/resilience/datasets/> .
@prefix logset: <logset#> .
@prefix : <dict#> .

:timeStampedLogFile   a logset:LogFormatType ; dcat:mediaType "text/plain" .
:sqlite3              a logset:LogFormatType ; dcat:mediaType "application/x-sqlite3" .
:filePerTimepoint     a logset:LogFormatType ; dcat:mediaType "inode/directory" .
:unstructuredTextFile a logset:LogFormatType ; dcat:mediaType "text/plain" .
:binaryFile           a logset:LogFormatType ; dcat:mediaType "application/octet-stream" .
# not everything is a (local or remote) file, eg for a slurm instance or NEWT call:
:localCommands        a logset:LogFormatType ; dcat:mediaType "application/x-executable" .
:newtAPI              a logset:LogFormatType ; dcat:mediaType "application/json" .
# is this useful?
#:unknownLogFormat     a logset:LogFormatType ; dcat:mediaType "text/plain" .

:log_messages  a logset:InfoType .
:job_records   a logset:InfoType .
:annotations   a logset:InfoType .

# annotations are a kind of log of their own, and can be related to other LogSets
:annotationDB
    a logset:LogSeries ;
    logset:logFormat :sqlite3 ;
    # would the schema count as logFormatInfo ? or the version?
    .

# some tags and corresponding python regex patterns to help in logseries identification:
# tags must be mostly-alphanumeric, with a colon allowed/used to separate a label for
# what the tag conveys from a shorthand version of the pattern it describes
# (this is because writing a full python regex for each filepattern is tedious and 
# error prone, and many have similar components, eg 'console-<date:YYYYMMDD>' and
# 'messages-<date:YYYYMMDD>')
:dateYYYYMMDD
    a logset:FilenamePattern ;
    logset:tag "<date:YYYYMMDD>" ;
    logset:regex "(?P<date>(?P<year>20[0-9]{2})(?P<month>0[1-9]|1[0-2])(?P<day>[0-3][0-9]))" ;
    .

:timeYYYYMMDDtHHmmss
    a logset:FilenamePattern ;
    logset:tag "<time:YYYYMMDDtHHmmss>" ;
    logset:regex "(?P<time>(?P<year>20[0-9]{2})(?P<month>0[1-9]|1[0-2])(?P<day>[0-3][0-9])t(?P<hour>[01][0-9]|2[0-3])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))" ;
    .

:timeYYYYMMDDHHmmss
    a logset:FilenamePattern ;
    logset:tag "<time:YYYYMMDDHHmmss>" ; 
    logset:regex "(?P<time>(?P<year>20[0-9]{2})(?P<month>0[1-9]|1[0-2])(?P<day>[0-3][0-9])(?P<hour>[01][0-9]|2[0-3])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))" ;
    .

:system
    a logset:FilenamePattern ;
    logset:tag "<system:>" ; 
    logset:regex "(?P<system>[a-z][a-z0-9]+)" ;
    .

:label
    a logset:FilenamePattern ;
    logset:tag "<label:>" ; 
    logset:regex "(?P<label>[a-z][a-z0-9]+)" ;
    .


