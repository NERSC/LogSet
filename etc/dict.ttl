# A sample/starting data dictionary

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dcat: <http://www.w3.org/ns/dcat#> .

# declare myself and set a prefix:
#@base <https://raw.githubusercontent.com/NERSC/LogSet/master/etc> .
@base <http://portal.nersc.gov/project/mpccc/sleak/resilience/datasets/> .
@prefix logset: <logset#> .
@prefix : <dict#> .

:timeStampedLogFile   a logset:LogFormatType ; dcat:mediaType "text/plain" .
:sqlite3              a logset:LogFormatType ; dcat:mediaType "application/x-sqlite3" .
:filePerTimepoint     a logset:LogFormatType ; dcat:mediaType "inode/directory" .
:unstructuredFile     a logset:LogFormatType ; dcat:mediaType "text/plain" .
:binaryFile           a logset:LogFormatType ; dcat:mediaType "application/octet-stream" .
#:unknownLogFormat     a logset:LogFormatType ; dcat:mediaType "text/plain" .

#logset:logFormat owl:oneOf (:timeStampedLogFile :unstructuredFile) .

# annotations are a kind of log of their own, and can be related to other LogSets
:annotationDB
    a logset:LogSeries ;
    logset:logFormat :sqlite3 ;
    # would the schema count as logFormatInfo ?
    .

# when indexing a bunch of logs, its helpful to be able to use filename patterns
# to guess the logseries based on the filename (eg messages-20170129 is a messages
# logfile for Jan 29, 2017). In practice this can be implemented by checking 
# filenames against a regex. But getting the regex right for every LogSeries is 
# tedious and unreliable, so we'll set up a kind of database of tags and patterns.
# This is in the dict instead of the vocab, because it is implementation specific 
# and will grow over time. Here we're using python regex syntax. The tag should be 
# an exact match for a portion of the filepattern.
:FilenamePattern a owl:Class .

:tag    
    a owl:DatatypeProperty ;
    rdfs:domain :FilenamePattern ;
    rdfs:range rdfs:Literal ;
    .

:regex
    a owl:DatatypeProperty ;
    rdfs:domain :FilenamePattern ;
    rdfs:range rdfs:Literal ;
    .

:dateYYYYMMDD
    a :FilenamePattern ;
    :tag "<dateYYYYMMDD>" ;
    :regex "(?P<year>20[0-9]{2})(?P<month>0[1-9]|1[0-2])(?P<day>[0-3][0-9])" ;
    .

:timeYYYYMMDDtHHmmss
    a :FilenamePattern ;
    :tag "<timeYYYYMMDDtHHmmss>" ;
    :regex "(?P<year>20[0-9]{2})(?P<month>0[1-9]|1[0-2])(?P<day>[0-3][0-9])t(?P<hour>[01][0-9]|2[0-3])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9])" ;
    .

:timeYYYYMMDDHHmmss
    a :FilenamePattern ;
    :tag "<timeYYYYMMDDHHmmss>" ; 
    :regex "(?P<year>20[0-9]{2})(?P<month>0[1-9]|1[0-2])(?P<day>[0-3][0-9])(?P<hour>[01][0-9]|2[0-3])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9])" ;
    .

:system
    a :FilenamePattern ;
    :tag "<system>" ; 
    :regex "(?P<system>[a-z][a-z0-9]+)" ;
    .


